/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.lina.query;

import com.lina.customAvro.ReversedConversion;
import com.lina.customAvro.ReversedLogicalType;
import org.apache.avro.Conversion;
import org.apache.avro.Schema;
import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class QueryRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8622258460496281568L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"QueryRecord\",\"namespace\":\"com.lina.query\",\"fields\":[{\"name\":\"queryId\",\"type\":\"string\"},{\"name\":\"queryAuthor\",\"type\":{\"type\":\"string\",\"logicalType\":\"reversed\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<QueryRecord> ENCODER =
      new BinaryMessageEncoder<QueryRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<QueryRecord> DECODER =
      new BinaryMessageDecoder<QueryRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<QueryRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<QueryRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<QueryRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<QueryRecord>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this QueryRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a QueryRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a QueryRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static QueryRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence queryId;
   private java.lang.CharSequence queryAuthor;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public QueryRecord() {}

  /**
   * All-args constructor.
   * @param queryId The new value for queryId
   * @param queryAuthor The new value for queryAuthor
   */
  public QueryRecord(java.lang.CharSequence queryId, java.lang.CharSequence queryAuthor) {
    this.queryId = queryId;
    this.queryAuthor = queryAuthor;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return queryId;
    case 1: return queryAuthor;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: queryId = (java.lang.CharSequence)value$; break;
    case 1: queryAuthor = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'queryId' field.
   * @return The value of the 'queryId' field.
   */
  public java.lang.CharSequence getQueryId() {
    return queryId;
  }


  /**
   * Sets the value of the 'queryId' field.
   * @param value the value to set.
   */
  public void setQueryId(java.lang.CharSequence value) {
    this.queryId = value;
  }

  /**
   * Gets the value of the 'queryAuthor' field.
   * @return The value of the 'queryAuthor' field.
   */
  public java.lang.CharSequence getQueryAuthor() {
    return queryAuthor;
  }


  /**
   * Sets the value of the 'queryAuthor' field.
   * @param value the value to set.
   */
  public void setQueryAuthor(java.lang.CharSequence value) {
    this.queryAuthor = value;
  }

  /**
   * Creates a new QueryRecord RecordBuilder.
   * @return A new QueryRecord RecordBuilder
   */
  public static com.lina.query.QueryRecord.Builder newBuilder() {
    return new com.lina.query.QueryRecord.Builder();
  }

  /**
   * Creates a new QueryRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new QueryRecord RecordBuilder
   */
  public static com.lina.query.QueryRecord.Builder newBuilder(com.lina.query.QueryRecord.Builder other) {
    if (other == null) {
      return new com.lina.query.QueryRecord.Builder();
    } else {
      return new com.lina.query.QueryRecord.Builder(other);
    }
  }

  /**
   * Creates a new QueryRecord RecordBuilder by copying an existing QueryRecord instance.
   * @param other The existing instance to copy.
   * @return A new QueryRecord RecordBuilder
   */
  public static com.lina.query.QueryRecord.Builder newBuilder(com.lina.query.QueryRecord other) {
    if (other == null) {
      return new com.lina.query.QueryRecord.Builder();
    } else {
      return new com.lina.query.QueryRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for QueryRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<QueryRecord>
    implements org.apache.avro.data.RecordBuilder<QueryRecord> {

    private java.lang.CharSequence queryId;
    private java.lang.CharSequence queryAuthor;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.lina.query.QueryRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.queryId)) {
        this.queryId = data().deepCopy(fields()[0].schema(), other.queryId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.queryAuthor)) {
        this.queryAuthor = data().deepCopy(fields()[1].schema(), other.queryAuthor);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing QueryRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.lina.query.QueryRecord other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.queryId)) {
        this.queryId = data().deepCopy(fields()[0].schema(), other.queryId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.queryAuthor)) {
        this.queryAuthor = data().deepCopy(fields()[1].schema(), other.queryAuthor);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'queryId' field.
      * @return The value.
      */
    public java.lang.CharSequence getQueryId() {
      return queryId;
    }


    /**
      * Sets the value of the 'queryId' field.
      * @param value The value of 'queryId'.
      * @return This builder.
      */
    public com.lina.query.QueryRecord.Builder setQueryId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.queryId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'queryId' field has been set.
      * @return True if the 'queryId' field has been set, false otherwise.
      */
    public boolean hasQueryId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'queryId' field.
      * @return This builder.
      */
    public com.lina.query.QueryRecord.Builder clearQueryId() {
      queryId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'queryAuthor' field.
      * @return The value.
      */
    public java.lang.CharSequence getQueryAuthor() {
      return queryAuthor;
    }


    /**
      * Sets the value of the 'queryAuthor' field.
      * @param value The value of 'queryAuthor'.
      * @return This builder.
      */
    public com.lina.query.QueryRecord.Builder setQueryAuthor(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.queryAuthor = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'queryAuthor' field has been set.
      * @return True if the 'queryAuthor' field has been set, false otherwise.
      */
    public boolean hasQueryAuthor() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'queryAuthor' field.
      * @return This builder.
      */
    public com.lina.query.QueryRecord.Builder clearQueryAuthor() {
      queryAuthor = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public QueryRecord build() {
      try {
        QueryRecord record = new QueryRecord();
        record.queryId = fieldSetFlags()[0] ? this.queryId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.queryAuthor = fieldSetFlags()[1] ? this.queryAuthor : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<QueryRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<QueryRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<QueryRecord>
    READER$ = (org.apache.avro.io.DatumReader<QueryRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.queryId);

    out.writeString(this.queryAuthor);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.queryId = in.readString(this.queryId instanceof Utf8 ? (Utf8)this.queryId : null);

      this.queryAuthor = in.readString(this.queryAuthor instanceof Utf8 ? (Utf8)this.queryAuthor : null);

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.queryId = in.readString(this.queryId instanceof Utf8 ? (Utf8)this.queryId : null);
          break;

        case 1:
          this.queryAuthor = in.readString(this.queryAuthor instanceof Utf8 ? (Utf8)this.queryAuthor : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
//TODO: Figure out a way to Autogenerate the below code and also generalise it
  @Override
  public Conversion<?> getConversion(int fieldIndex) {
    Schema fieldSchema = SCHEMA$.getFields().get(fieldIndex).schema();
    if ((fieldSchema.getLogicalType() != null)
            && (fieldSchema.getLogicalType().getName() == ReversedLogicalType.REVERSED_LOGICAL_TYPE_NAME)){
      MODEL$.addLogicalTypeConversion(ReversedConversion.get());
      return MODEL$.getConversionFor(fieldSchema.getLogicalType());
      //return ReversedConversion.get(); -- Even this works
    }
    return null;
  }

}










